{"name":"Koa-waterline","tagline":"a middelware for your hose","body":"# koa-waterline\r\n  Middleware for your hose\r\n  \r\n  \r\n[![NPM](https://nodei.co/npm/koa-waterline.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/koa-waterline/) [![NPM](https://nodei.co/npm-dl/koa-waterline.png?months=6&height=3)](https://nodei.co/npm/koa-waterline/)\r\n\r\n\r\n\r\n    npm install koa-waterline\r\n\r\n## Usage\r\n\r\n    //see example.js\r\n\r\n    function* (){\r\n      var ctx            = this;\r\n      var message        = 'This is an example';\r\n      var commentCreated = yield ctx._waterline.collections.comments.create({message: message});\r\n      // You can yield to the CRUD waterline functions because they are written as promises.\r\n      console.log(commentCreated);\r\n    }\r\n\r\n    // OR\r\n\r\n    function* () {\r\n      var waterline      = Waterline.init(injection);\r\n      var message        = 'This is an example';\r\n      var commentCreated = yield waterline.collections.comments.create({message: message});\r\n    }\r\n\r\n   * The model attributes of connection and adp must match the connection and adapter naming conventions when setting up your environment to inject into the middleware.\r\n\r\n## Example\r\n\r\n    var connections= {\r\n      couch: {\r\n        adapter: \"couch\",\r\n        host: '127.0.0.1',\r\n        port: '5984',\r\n        username: '',\r\n        password: ''\r\n      },\r\n      mongo: {\r\n        adapter: \"mongo\",\r\n        host: 'localhost',\r\n        port: '27017',\r\n        user: '',\r\n        password: '',\r\n        database: 'waterline'\r\n      }\r\n    };\r\n\r\n    var adapters= {\r\n      couch: require('sails-couchdb-orm'),\r\n      mongo: require('sails-mongo')\r\n    };\r\n\r\n    var models = {\r\n      \"comments\": {\r\n        \"adp\": \"couch\",\r\n        \"connection\": \"couch\",\r\n        \"properties\": {\r\n          \"archived\": {\r\n              \"type\": \"boolean\",\r\n              \"defaultValue\": false\r\n          },\r\n          \"message\": {\r\n              \"type\": \"string\"\r\n          }\r\n        }\r\n      },\r\n      \"history\": {\r\n        \"adp\": \"mongo\",\r\n        \"connection\": \"mongo\",\r\n        \"properties\": {\r\n          \"activity_id\": {\r\n            \"type\": \"number\",\r\n            \"enum\": [\r\n                \"unique\"\r\n            ]\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    var injection               = {};\r\n    injection.methods           = false;\r\n    injection.models            = models;\r\n    injection.adapters          = adapters;\r\n    injection.connections       = connections\r\n\r\n    app.use(waterline(injection));\r\n\r\n\r\n##Attributes\r\n*Models* - Required\r\n\r\n    - Models must have an adp, connection, and the properties attributes with the same design pattern in the example above.\r\n\r\n*Adapters* - Required\r\n\r\n    - The adapters refer to the connection adapters; this is required and while seeming redundant it is required to run waterline\r\n\r\n*Connections* - Required\r\n\r\n    - The connection attributes are the setting parameters for the data models to create the waterline.\r\n*Methods* - Optional\r\n\r\n     - The methods attribute allows the injection of functions for virtual methods inside the model. An example of such an injection would something like this:\r\n\r\nMethods Example:\r\n\r\n     var methods = {\r\n         history: function(){\r\n         //virtual methods specific to the history model\r\n         },\r\n         comments: function(){\r\n         //virtual methods specific to the comments model\r\n         }\r\n    };\r\n\r\n## Authors\r\n\r\n  - [Peter A Tariche](https://github.com/ptariche)\r\n\r\n# License\r\n\r\n  MIT\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}